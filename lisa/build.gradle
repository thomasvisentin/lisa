/*
 * This file contains the general configuration of the build script and the list of plugins to apply.
 * Anything else, with very few exceptions, should be placed into a separate gradle file that has to
 * be applied at the end of this file. 
 * 
 * When defining a custom task, use 'tasks.register("taskname")', specifying also group and description,
 * to help others understand the purpose of that task. 
 */
buildscript {
  	repositories {
  		jcenter()
    	mavenCentral()
  	}
  	dependencies {
    	classpath 'org.ajoberstar.grgit:grgit-core:4.0.2'
    	classpath 'org.ajoberstar.grgit:grgit-gradle:4.0.2'
  	}
}

plugins {
	// telling gradle that we are building a library
    id 'java-library'
    
    // magic for getting eclipse to work with gradle
    id 'eclipse'
    
    // antlr plugin for the generation of the IMP parser
    id 'antlr'
    
    // automatic generation of plantuml files from the source code
    // for visualizing them: https://www.planttext.com/
    id 'com.github.roroche.plantuml' version '1.0.2'
    
    // this can generate images from plantuml files
	// it requires graphviz to be installed 
	id "org.fmiw.plantuml" version "0.1"
    
    // parse git information during the build
    id 'org.ajoberstar.grgit' version '4.0.2'
    
    // code formatting task -- spotlessCheck for checking, spotlessApply for applying
    id "com.diffplug.spotless" version "5.8.2"
    
    // javadoc checking - coding conventions
    id 'checkstyle'
    
    // this enables './gradlew <task> taskTree' to show task dependencies
    id "com.dorongold.task-tree" version "1.5"
    
    // publication on maven central
    id 'maven-publish'
    id 'signing'
}

// the code reading data from the git repo has to be placed in the same file where its
// plugin is applied, otherwise it will fail to load the classes from it. We export the
// properties that we read for using them later in the appropriate gradle files
def ready = false
def cid = ''
def tag = ''
def branch = ''
def is_clean = ''
try {
	def repo = org.ajoberstar.grgit.Grgit.open(dir: rootProject.projectDir.getParent())
	ready = true
	cid = repo.head().abbreviatedId
	tag = repo.describe(tags: true, always: true)
	branch = repo.branch.current().getName()
	is_clean = repo.status().isClean()
} catch (Exception e) {
	// this means we are building from outside of LiSA, probably from an outer model
	// we can skip the manifest attributes injection here
	println("Skipping manifest attriubtes injection because we are not directly building LiSA")
	println(e)
}

ext {
	git_ready = ready
	git_cid = cid
	git_tag = tag
	git_branch = branch
	git_is_clean = is_clean
}

group = 'it.unive'
version = '0.1a3'

apply from: 'dependencies.gradle'
apply from: 'java.gradle'
apply from: 'code-style.gradle'
apply from: 'doc-extra.gradle'
apply from: 'antlr.gradle'
apply from: 'publishing.gradle'
